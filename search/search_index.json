{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"These pages hold setup instructions and examples for configurations/pieces for the SPRAWL system. SPRAWL Notes is a general readme and task list for setting up the new SPRAWL system. Filter Band is the first example piece Ansible Getting Started is a (very) short manual on how to get started","title":"Home"},{"location":"ansible_getting_started/","text":"Getting started programs that should be installed: - Ansible - git Clone the sprawl repo: git clone git@github.com:ringbuffer-org/SPRAWL.git hosts/inventory hosts file contains all hosts that can be accessed by playbooks. [active_sprawl_nodes] AP-03 ansible_user=member AP-04 ansible_user=member AP-05 ansible_user=member AP-07 ansible_user=member AP-08 ansible_user=member AP-09 ansible_user=member AP-10 ansible_user=member AP-14 ansible_user=member AP-15 ansible_user=member AP-16 ansible_user=member [sprawl_nodes] AP-01.local ansible_user=member AP-0[3:9].local ansible_user=member AP-1[0:7].local ansible_user=member ansible.cfg is most easily found by ansible when it is in the same directory from which ansible commands are executed. config file that informs ansible about some default settings. [defaults] inventory = /path/to/hosts/file # inventory = hosts private_key_file=/path/to/private/key host_key_checking=false ssh keys asymetrical encryption keys, used for authentication Transfer own key to hosts: ansible-playbook pi_setup/playbooks/install_ssh_key.yml --ask-pass -e \"key=path/to/public/key.pub\" --fork=14 Start Ansible Piece ansible-playbook Delay_Graph/launch_delay_ring.yml --fork 14","title":"Getting started"},{"location":"ansible_getting_started/#getting-started","text":"programs that should be installed: - Ansible - git Clone the sprawl repo: git clone git@github.com:ringbuffer-org/SPRAWL.git","title":"Getting started"},{"location":"ansible_getting_started/#hostsinventory","text":"hosts file contains all hosts that can be accessed by playbooks. [active_sprawl_nodes] AP-03 ansible_user=member AP-04 ansible_user=member AP-05 ansible_user=member AP-07 ansible_user=member AP-08 ansible_user=member AP-09 ansible_user=member AP-10 ansible_user=member AP-14 ansible_user=member AP-15 ansible_user=member AP-16 ansible_user=member [sprawl_nodes] AP-01.local ansible_user=member AP-0[3:9].local ansible_user=member AP-1[0:7].local ansible_user=member","title":"hosts/inventory"},{"location":"ansible_getting_started/#ansiblecfg","text":"is most easily found by ansible when it is in the same directory from which ansible commands are executed. config file that informs ansible about some default settings. [defaults] inventory = /path/to/hosts/file # inventory = hosts private_key_file=/path/to/private/key host_key_checking=false","title":"ansible.cfg"},{"location":"ansible_getting_started/#ssh-keys","text":"asymetrical encryption keys, used for authentication Transfer own key to hosts: ansible-playbook pi_setup/playbooks/install_ssh_key.yml --ask-pass -e \"key=path/to/public/key.pub\" --fork=14","title":"ssh keys"},{"location":"ansible_getting_started/#start-ansible-piece","text":"ansible-playbook Delay_Graph/launch_delay_ring.yml --fork 14","title":"Start Ansible Piece"},{"location":"filter_band/","text":"Filter Band A distributed filter-bank configuration for spectral spatialization. Sounds from each musician are sent to every other Access Point, where they are processed with a bandpass filter and sent to the AP's output to the audio system (local speaker or virtual sound source). The configuration works for an unlimited number of APs. Example for a 4-AP setup: System Configuration Audio Routing fully connected network each AP sends raw audio to all other APs, eg. microphone synth Processing Each AP runs a single bandpass filter. Control Each musician can control the following parameters via touch screen: filter center frequency filter quality/bandwidth/resonance output gain Launch & Kill Launch piece via Ansible: $ ansible-playbook -i hosts playbooks/launch_filterband.yml Kill all components via Ansible: $ ansible-playbook -i hosts playbooks/kill_filterband.yml Note: There are nicer ways of doing this: - Run whole piece in single tmux session? Performance musicians are assigned a role, changing over the course of a performance: sound source processor","title":"Filter Band"},{"location":"filter_band/#filter-band","text":"A distributed filter-bank configuration for spectral spatialization. Sounds from each musician are sent to every other Access Point, where they are processed with a bandpass filter and sent to the AP's output to the audio system (local speaker or virtual sound source). The configuration works for an unlimited number of APs. Example for a 4-AP setup:","title":"Filter Band"},{"location":"filter_band/#system-configuration","text":"","title":"System Configuration"},{"location":"filter_band/#audio-routing","text":"fully connected network each AP sends raw audio to all other APs, eg. microphone synth","title":"Audio Routing"},{"location":"filter_band/#processing","text":"Each AP runs a single bandpass filter.","title":"Processing"},{"location":"filter_band/#control","text":"Each musician can control the following parameters via touch screen: filter center frequency filter quality/bandwidth/resonance output gain","title":"Control"},{"location":"filter_band/#launch-kill","text":"Launch piece via Ansible: $ ansible-playbook -i hosts playbooks/launch_filterband.yml Kill all components via Ansible: $ ansible-playbook -i hosts playbooks/kill_filterband.yml Note: There are nicer ways of doing this: - Run whole piece in single tmux session?","title":"Launch &amp; Kill"},{"location":"filter_band/#performance","text":"musicians are assigned a role, changing over the course of a performance: sound source processor","title":"Performance"},{"location":"system_boot/","text":"SPRAWL Notes User & Hostname Every PI has the same user name member Every PI has an individual hostname AP_XX Network Ethernet: switch with router and DHCP, nodes can be reached via hostnam. Wireless: each PI opens an individual WiFi. SSH enabled VNC/RDP enabled Installed Software jack aj-snapshot JackTrip SuperCollider sclang scsynth sc3-plugins PD (vanilla) Python3 python-osc Initial Setup of Pi Flash Rasperry Pi OS to a SD-Card, use these Settings in the RPi-Imager: set hostname: AP-XX (where XX is the associated number of the Pi) enable SSH, use password authentication set username and password Username: member Password: set locale settings (optional) Provisioning After boot, execute these playbooks to make it run ansible-playbook pi_setup/playbooks/install_ssh_key.yml --ask-pass -e \"key=path/to/public/key\" ansible-playbook pi_setup/playbooks/full_setup.yml Jacktrip Configuration Two options: One server on each PI, every PI has a client for each server (n Servers, n*n-1 clients) p2p connections between all PIs ((n*(n-1))/2 connections) Roll out (new) Pieces Stuff for pieces in one directory only: /home/member/pieces/piece_subdir Two options: Distribute code & binaries via ssh (ansible). Grab all code (& build binaries) via repositories (pull via ansible). Start and Stop Pieces System needs to be back in plain state after each piece. provide 'kill' playbooks","title":"SPRAWL Notes"},{"location":"system_boot/#sprawl-notes","text":"","title":"SPRAWL Notes"},{"location":"system_boot/#user-hostname","text":"Every PI has the same user name member Every PI has an individual hostname AP_XX","title":"User &amp; Hostname"},{"location":"system_boot/#network","text":"Ethernet: switch with router and DHCP, nodes can be reached via hostnam. Wireless: each PI opens an individual WiFi. SSH enabled VNC/RDP enabled","title":"Network"},{"location":"system_boot/#installed-software","text":"jack aj-snapshot JackTrip SuperCollider sclang scsynth sc3-plugins PD (vanilla) Python3 python-osc","title":"Installed Software"},{"location":"system_boot/#initial-setup-of-pi","text":"Flash Rasperry Pi OS to a SD-Card, use these Settings in the RPi-Imager: set hostname: AP-XX (where XX is the associated number of the Pi) enable SSH, use password authentication set username and password Username: member Password: set locale settings (optional)","title":"Initial Setup of Pi"},{"location":"system_boot/#provisioning","text":"After boot, execute these playbooks to make it run ansible-playbook pi_setup/playbooks/install_ssh_key.yml --ask-pass -e \"key=path/to/public/key\" ansible-playbook pi_setup/playbooks/full_setup.yml","title":"Provisioning"},{"location":"system_boot/#jacktrip-configuration","text":"Two options: One server on each PI, every PI has a client for each server (n Servers, n*n-1 clients) p2p connections between all PIs ((n*(n-1))/2 connections)","title":"Jacktrip Configuration"},{"location":"system_boot/#roll-out-new-pieces","text":"Stuff for pieces in one directory only: /home/member/pieces/piece_subdir Two options: Distribute code & binaries via ssh (ansible). Grab all code (& build binaries) via repositories (pull via ansible).","title":"Roll out (new) Pieces"},{"location":"system_boot/#start-and-stop-pieces","text":"System needs to be back in plain state after each piece. provide 'kill' playbooks","title":"Start and Stop Pieces"}]}