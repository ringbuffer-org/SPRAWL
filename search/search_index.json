{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"These pages hold a collection of configurations for the SPRAWL system.","title":"Home"},{"location":"filter_band/","text":"Filter Band A distributed filter-bank configuration for spectral spatialization. Sounds from each musician are sent to every other Access Point, where they are processed with a bandpass filter and sent to the AP's output to the audio system (local speaker or virtual sound source). The configuration works for an unlimited number of APs. Example for a 4-AP setup: System Configuration Audio Routing fully connected network each AP sends raw audio to all other APs, eg. microphone synth Processing Each AP runs a single bandpass filter. Control Each musician can control the following parameters via touch screen: filter center frequency filter quality/bandwidth/resonance output gain Launch & Kill Launch piece via Ansible: $ ansible-playbook -i hosts playbooks/launch_filterband.yml Kill all components via Ansible: $ ansible-playbook -i hosts playbooks/kill_filterband.yml Note: There are nicer ways of doing this: - Run whole piece in single tmux session? Performance musicians are assigned a role, changing over the course of a performance: sound source processor","title":"Filter Band"},{"location":"filter_band/#filter-band","text":"A distributed filter-bank configuration for spectral spatialization. Sounds from each musician are sent to every other Access Point, where they are processed with a bandpass filter and sent to the AP's output to the audio system (local speaker or virtual sound source). The configuration works for an unlimited number of APs. Example for a 4-AP setup:","title":"Filter Band"},{"location":"filter_band/#system-configuration","text":"","title":"System Configuration"},{"location":"filter_band/#audio-routing","text":"fully connected network each AP sends raw audio to all other APs, eg. microphone synth","title":"Audio Routing"},{"location":"filter_band/#processing","text":"Each AP runs a single bandpass filter.","title":"Processing"},{"location":"filter_band/#control","text":"Each musician can control the following parameters via touch screen: filter center frequency filter quality/bandwidth/resonance output gain","title":"Control"},{"location":"filter_band/#launch-kill","text":"Launch piece via Ansible: $ ansible-playbook -i hosts playbooks/launch_filterband.yml Kill all components via Ansible: $ ansible-playbook -i hosts playbooks/kill_filterband.yml Note: There are nicer ways of doing this: - Run whole piece in single tmux session?","title":"Launch &amp; Kill"},{"location":"filter_band/#performance","text":"musicians are assigned a role, changing over the course of a performance: sound source processor","title":"Performance"},{"location":"system_boot/","text":"SPRAWL Notes User & Hostname Every PI has the same user name? member Every PI has an individual hostname? AP_x Network Ethernet: switch with manual DHCP addresses. Wireless: each PI opens an individual WiFi. SSH enabled VNC/RDP enabled Installed Software jack aj-snapshot JackTrip SuperCollider sclang scsynth sc3-plugins PD (vanilla) Python3 python-osc Roll out (new) Pieces Stuff for pieces in one directory only: /home/member/pieces/piece_subdir Tow options: Distribute code & binaries via ssh (ansible). Grab all code (& build binaries) via repositories (pull via ansible). Start and Stop Pieces System needs to be back in plain state after each piece. provide 'kill' playbooks","title":"SPRAWL Notes"},{"location":"system_boot/#sprawl-notes","text":"","title":"SPRAWL Notes"},{"location":"system_boot/#user-hostname","text":"Every PI has the same user name? member Every PI has an individual hostname? AP_x","title":"User &amp; Hostname"},{"location":"system_boot/#network","text":"Ethernet: switch with manual DHCP addresses. Wireless: each PI opens an individual WiFi. SSH enabled VNC/RDP enabled","title":"Network"},{"location":"system_boot/#installed-software","text":"jack aj-snapshot JackTrip SuperCollider sclang scsynth sc3-plugins PD (vanilla) Python3 python-osc","title":"Installed Software"},{"location":"system_boot/#roll-out-new-pieces","text":"Stuff for pieces in one directory only: /home/member/pieces/piece_subdir Tow options: Distribute code & binaries via ssh (ansible). Grab all code (& build binaries) via repositories (pull via ansible).","title":"Roll out (new) Pieces"},{"location":"system_boot/#start-and-stop-pieces","text":"System needs to be back in plain state after each piece. provide 'kill' playbooks","title":"Start and Stop Pieces"}]}